import numpy as np

# Assuming 'Stage_indicator' and 'realized_losses' are NumPy arrays with shape (num_sims, num_properties, num_years)
# Replace 'num_sims', 'num_properties', and 'num_years' with the actual values for your arrays.

# Example data (replace this with your actual data)
num_sims = 2
num_properties = 3
num_years = 5

Stage_indicator = np.random.randint(1, 4, size=(num_sims, num_properties, num_years))
realized_losses = np.random.randint(1, 100, size=(num_sims, num_properties, num_years))

print(Stage_indicator)
print(realized_losses)
# Initialize arrays to store results
stage_losses = np.zeros((num_sims, 3, num_years))  # 3 stages and num_years
stage_property_count = np.zeros((num_sims, 3, num_years))  # 3 stages and num_years

# Loop through the stages and calculate both losses and property counts
for stage in range(1, 4):  # Stages are 1, 2, 3
    mask = (Stage_indicator == stage)  # Create a mask for each stage
    
    # Calculate losses for each stage year-wise for every simulation
    stage_losses[:, stage - 1, :] = np.sum(realized_losses * mask, axis=1)

    # Calculate property count for each stage year-wise for every simulation
    stage_property_count[:, stage - 1, :] = np.sum(mask, axis=1)

print("Stage-wise losses year-wise for every simulation:")
print(stage_losses)

# Calculate the average of losses stage-wise across the simulations
average_stage_losses = np.mean(stage_losses, axis=0)

print("Average losses stage-wise across the simulations:")
print(average_stage_losses)

print("Stage-wise property count year-wise for every simulation:")
print(stage_property_count)

# Calculate the average of properties stage-wise across the simulations
average_stage_property_count = np.mean(stage_property_count, axis=0)

print("Average property count stage-wise across the simulations:")
print(average_stage_property_count)

# Calculate the average loss across all years for each stage
average_loss_all_years = np.mean(average_stage_losses, axis=1)

print("Average loss across all years for each stage:")
print(average_loss_all_years)

# Calculate the average property count across all years for each stage
average_count_all_years = np.mean(average_stage_property_count, axis=1)

print("Average loss across all years for each stage:")
print(average_count_all_years)


***************Excel *************

import pandas as pd

# Read Table 1: Damage Ratio (DR) = 0.15
table_1_data = {
    'PELTV': [40, 60, 80, 90, 100],
    'PEDTI_40': [1, 2, 3, 1, 2],
    'PEDTI_70': [2, 1, 2, 3, 1],
    'PEDTI_100': [1, 3, 1, 2, 3]
}

df_table_1 = pd.DataFrame(table_1_data)
df_table_1.set_index('PELTV', inplace=True)

# Read Table 2: Damage Ratio (DR) > 0.15 to DR < 0.7
# Using the same data as Table 1
df_table_2 = df_table_1.copy()

# Read Table 3: Damage Ratio (DR) > 0.7
# Using the same data as Table 1
df_table_3 = df_table_1.copy()

# Function to select the Stage Value based on DR, PELTV, and PEDTI
def select_stage_value(dr, peltv, pedti):
    if dr <= 0.15:
        df = df_table_1
    elif dr > 0.15 and dr < 0.7:
        df = df_table_2
    else:
        df = df_table_3

    stage_value = df.loc[peltv, f'PEDTI_{pedti}']
    return stage_value

# Example usage:
dr_value = 0.25
peltv_value = 90
pedti_value = 70

stage_value = select_stage_value(dr_value, peltv_value, pedti_value)
print(f"Stage Value: {stage_value}")
